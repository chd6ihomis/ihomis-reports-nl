<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.16  |
    |              on 2025-07-23 08:44:19              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 namespace App\Http\Livewire\Reports; use App\Exports\NoOfPatientsAndConsultationsExport; use Illuminate\Support\Carbon; use Illuminate\Support\Facades\DB; use PhpOffice\PhpSpreadsheet\Style\NumberFormat; use Livewire\Component; use Maatwebsite\Excel\Facades\Excel; class NoOfPatientsAndConsultationsEncoded extends Component { public $month; public $year; public $state = array(); public function mount() { $today = Carbon::today(); $this->month = $today->format('m'); $this->year = $today->format('Y'); $this->state['month'] = $this->month; $this->state['year'] = $this->year; } public function updatedState() : void { $this->month = $this->state['month'] ?? $this->month; $this->year = $this->state['year'] ?? $this->year; } public function filter() : void { $this->updatedState(); } public function export() { $collection = $this->baseQuery()->get(); return Excel::download(new NoOfPatientsAndConsultationsExport($collection), "No-of-Patients-and-Consultations-Encoded-Report({$this->month}-{$this->year}).xlsx"); } protected function baseQuery() { $opdQuery = DB::table('hopdlog')->selectRaw("'OPD' AS Department, COUNT(DISTINCT hpercode) AS No_of_Patients_Encoded, COUNT(enccode) AS No_of_Consultations_Encoded")->whereMonth('opddate', $this->month)->whereYear('opddate', $this->year); $erQuery = DB::table('herlog')->selectRaw("'ER' AS Department, COUNT(DISTINCT hpercode) AS No_of_Patients_Encoded, COUNT(enccode) AS No_of_Consultations_Encoded")->whereMonth('erdate', $this->month)->whereYear('erdate', $this->year); $admQuery = DB::table('hadmlog')->selectRaw("'ADM' AS Department, COUNT(DISTINCT hpercode) AS No_of_Patients_Encoded, COUNT(enccode) AS No_of_Consultations_Encoded")->whereMonth('admdate', $this->month)->whereYear('admdate', $this->year); $subQuery = DB::table('hopdlog')->select('hpercode', 'enccode')->whereMonth('opddate', $this->month)->whereYear('opddate', $this->year)->unionAll(DB::table('herlog')->select('hpercode', 'enccode')->whereMonth('erdate', $this->month)->whereYear('erdate', $this->year))->unionAll(DB::table('hadmlog')->select('hpercode', 'enccode')->whereMonth('admdate', $this->month)->whereYear('admdate', $this->year)); $totalQuery = DB::table(DB::raw("({$subQuery->toSql()}) as all_logs"))->mergeBindings($subQuery)->selectRaw("'Total' AS Department, COUNT(DISTINCT hpercode) AS No_of_Patients_Encoded, COUNT(enccode) AS No_of_Consultations_Encoded"); return $opdQuery->unionAll($erQuery)->unionAll($admQuery)->unionAll($totalQuery); } public function render() { $datas = $this->baseQuery()->get(); return view('livewire.reports.no-of-patients-and-consultations-encoded', compact('datas')); } }
