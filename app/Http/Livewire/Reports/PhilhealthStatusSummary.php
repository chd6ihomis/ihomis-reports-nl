<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.16  |
    |              on 2025-07-23 08:44:19              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 namespace App\Http\Livewire\Reports; use App\Exports\PHECStatusExport; use Illuminate\Support\Carbon; use Illuminate\Support\Facades\DB; use Livewire\Component; use Livewire\WithPagination; use Maatwebsite\Excel\Facades\Excel; class PhilhealthStatusSummary extends Component { use WithPagination; protected $paginationTheme = 'bootstrap'; public $search = ''; public $type = '0'; public $status = ''; public $fDate; public $tDate; public $state = array(); protected $updatesQueryString = array('search', 'status', 'type', 'state'); public function mount() : void { $this->fDate = Carbon::today()->startOfMonth()->toDateString(); $this->tDate = Carbon::today()->toDateString(); $this->state['fdate'] = $this->fDate; $this->state['tdate'] = $this->tDate; $this->status = ''; } public function updating($property) { $this->resetPage(); } public function updatedState() : void { $this->fDate = $this->state['fdate'] ?? $this->fDate; $this->tDate = $this->state['tdate'] ?? $this->tDate; $this->resetPage(); } public function filter() : void { $this->updatedState(); } public function export() { if ($this->type === '1') { goto NG3gk; } if ($this->type === '2') { goto hMTx1; } $hadmlog = $this->baseQuery('hadmlog'); $hopdlog = $this->baseQuery('hopdlog'); $collection = $hadmlog->union($hopdlog)->get(); goto Ve0Ox; NG3gk: $collection = $this->baseQuery('hadmlog')->get(); goto Ve0Ox; hMTx1: $collection = $this->baseQuery('hopdlog')->get(); Ve0Ox: return Excel::download(new PHECStatusExport($collection), "PhilHealth-Eclaims-Status-Report({$this->fDate}_to_{$this->tDate}).xlsx"); } protected function baseQuery($table) { return DB::table($table)->leftJoin('hphicclaimmap', "{$table}.enccode", '=', 'hphicclaimmap.enccode')->leftJoin('hpatcon', "{$table}.enccode", '=', 'hpatcon.enccode')->leftJoin('hpatcon1', "{$table}.enccode", '=', 'hpatcon1.enccode')->leftJoin('hphicclaimtransmittal', "{$table}.enccode", '=', 'hphicclaimtransmittal.enccode')->leftJoin('hphicclaimstatus', 'hphicclaimmap.Pclaimserieslhio', '=', 'hphicclaimstatus.Pclaimserieslhio')->leftJoin('hphiclog', 'hpatcon.memphicnum', '=', 'hphiclog.phicnum')->join('hperson', "{$table}.hpercode", '=', 'hperson.hpercode')->select('hphicclaimmap.Pclaimserieslhio', DB::raw("CONCAT(' ', hperson.patlast, ', ', hperson.patfirst, ' ', IFNULL(hperson.patmiddle, ''), ' ', IFNULL(hperson.patsuffix, '')) AS PatientName"), DB::raw("CONCAT(' ', hphiclog.memlast, ', ', hphiclog.memfirst, ' ', IFNULL(hphiclog.memmid, '')) AS MemberName"), 'hpatcon.memphicnum', 'hphicclaimmap.pAdmissionDate', 'hphicclaimmap.pDischargeDate', 'hphicclaimmap.pReceiptTicketNumber', 'hphicclaimmap.pClaimNumber', 'hphicclaimmap.preceiveddate', 'hphicclaimmap.pStatus', 'hpatcon1.firstcase AS firstcasecode', 'hpatcon1.philhealthbenepf AS phicdocfee', 'hpatcon1.philhealthbenehci AS phichospfee', DB::raw('IFNULL(hphicclaimstatus.pTotalClaimAmountPaid, 0) AS pTotalClaimAmountPaid'), DB::raw('IFNULL(hphicclaimstatus.pclaimdaterefile, "") AS pclaimdaterefile'))->whereBetween(DB::raw("STR_TO_DATE(hphicclaimmap.pReceivedDate, '%m-%d-%Y')"), [$this->fDate, $this->tDate])->where('hphicclaimmap.pStatus', 'like', '%' . ($this->status ?? '') . '%')->where(function ($query) { $searchTerm = '%' . $this->search . '%'; $query->where(DB::raw("CONCAT(' ', hperson.patlast, ', ', hperson.patfirst, ' ', IFNULL(hperson.patmiddle, ''), ' ', IFNULL(hperson.patsuffix, ''))"), 'like', $searchTerm)->orWhere(DB::raw("CONCAT(' ', hphiclog.memlast, ', ', hphiclog.memfirst, ' ', IFNULL(hphiclog.memmid, ''))"), 'like', $searchTerm)->orWhere('hpatcon.memphicnum', 'like', $searchTerm); })->orderBy('hperson.patlast'); } public function render() { if ($this->type === '1') { goto As6IM; } if ($this->type === '2') { goto MmPK9; } $hadmlogQuery = $this->baseQuery('hadmlog'); $hopdlogQuery = $this->baseQuery('hopdlog'); $query = $hadmlogQuery->union($hopdlogQuery); goto G_BnV; As6IM: $query = $this->baseQuery('hadmlog'); goto G_BnV; MmPK9: $query = $this->baseQuery('hopdlog'); G_BnV: $datas = $query->paginate(10); return view('livewire.reports.philhealth-status-summary', compact('datas')); } }
