<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.16  |
    |              on 2025-07-23 08:44:18              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
 namespace App\Exports; use Maatwebsite\Excel\Concerns\FromCollection; use Maatwebsite\Excel\Concerns\WithColumnFormatting; use Maatwebsite\Excel\Concerns\WithHeadings; use Maatwebsite\Excel\Concerns\WithMapping; use Maatwebsite\Excel\Concerns\WithStyles; use PhpOffice\PhpSpreadsheet\Style\Alignment; use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet; use PhpOffice\PhpSpreadsheet\Style\NumberFormat; class PHECStatusExport implements FromCollection, WithHeadings, WithMapping, WithColumnFormatting, WithStyles { protected $collection; public function __construct($collection) { $this->collection = $collection; } public function collection() { return $this->collection; } public function headings() : array { return ['Claim Series LHIO', 'Patient Lastname', 'Patient Firstname', 'Patient Middlename', 'Member Lastname', 'Member Firstname', 'Member Middlename', 'PHIC Number', 'Admission Date', 'Discharge Date', 'Receipt Ticket Number', 'Claim Number', 'Received Date', 'Status', 'First Case Code', 'Doctor Fee', 'Hospital Fee', 'Total Claim Amount Paid', 'Claim Date Refile']; } public function map($row) : array { $splitName = function ($fullName) { $fullName = trim($fullName); $lastname = $firstname = $middlename = ''; if (str_contains($fullName, ',')) { goto f8yX3; } $parts = preg_split('/\\s+/', $fullName); $lastname = $parts[0] ?? ''; $firstname = $parts[1] ?? ''; $middlename = $parts[2] ?? ''; goto NWlT5; f8yX3: [$lastname, $rest] = explode(',', $fullName, 2); $lastname = trim($lastname); $parts = preg_split('/\\s+/', trim($rest)); $firstname = $parts[0] ?? ''; $middlename = $parts[1] ?? ''; NWlT5: return [$lastname, $firstname, $middlename]; }; [$pLast, $pFirst, $pMid] = $splitName($row->PatientName); [$mLast, $mFirst, $mMid] = $splitName($row->MemberName); return [$row->Pclaimserieslhio, $pLast, $pFirst, $pMid, $mLast, $mFirst, $mMid, $row->memphicnum, $row->pAdmissionDate, $row->pDischargeDate, $row->pReceiptTicketNumber, $row->pClaimNumber, $row->preceiveddate, $row->pStatus, $row->firstcasecode, $row->phicdocfee, $row->phichospfee, $row->pTotalClaimAmountPaid, $row->pclaimdaterefile]; } public function columnFormats() : array { return ['A' => NumberFormat::FORMAT_NUMBER, 'H' => NumberFormat::FORMAT_NUMBER, 'K' => NumberFormat::FORMAT_NUMBER, 'L' => NumberFormat::FORMAT_NUMBER, 'P' => NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED2, 'Q' => NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED2, 'R' => NumberFormat::FORMAT_NUMBER_COMMA_SEPARATED2]; } public function styles(Worksheet $sheet) { $sheet->getStyle('1')->getFont()->setBold(true); foreach (range('A', 'S') as $columnID) { $sheet->getColumnDimension($columnID)->setAutoSize(true); d7yEU: } ybpS9: $alignmentCenter = ['alignment' => ['horizontal' => Alignment::HORIZONTAL_CENTER]]; $alignmentRight = ['alignment' => ['horizontal' => Alignment::HORIZONTAL_RIGHT]]; $alignmentLeft = ['alignment' => ['horizontal' => Alignment::HORIZONTAL_LEFT]]; $sheet->getStyle('A')->applyFromArray($alignmentCenter); $sheet->getStyle('H')->applyFromArray($alignmentCenter); $sheet->getStyle('I')->applyFromArray($alignmentCenter); $sheet->getStyle('J')->applyFromArray($alignmentCenter); $sheet->getStyle('L')->applyFromArray($alignmentLeft); $sheet->getStyle('M')->applyFromArray($alignmentCenter); $sheet->getStyle('N')->applyFromArray($alignmentCenter); $sheet->getStyle('O')->applyFromArray($alignmentCenter); $sheet->getStyle('S')->applyFromArray($alignmentCenter); $sheet->getStyle('P')->applyFromArray($alignmentRight); $sheet->getStyle('Q')->applyFromArray($alignmentRight); $sheet->getStyle('R')->applyFromArray($alignmentRight); } }
